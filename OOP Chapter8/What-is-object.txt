ออบเจ็กต์ (object) จากตัวอย่างที่ได้กล่าวมาทำให้เราเข้าใจมากขึ้น แท้จริงแล้วออบเจ็กก็คือ
สิ่งต่าง ๆ ที่อยู่รอบตัวเรา เช่น คน รถยนต์ ลูกค้า ใบเสร็จร้บเงิน (Bill) ในการเขียนโปรแกรมเชิงวัตถุ
เราจะมองสิ่งต่าง ๆ ที่เราต้องการแก้ปัญหาเป็นวัตถุ โดยธรรมชาติแล้วเมื่อเรามองวัตถุ จะเห็นลักษณะต่าง ๆ 
ของวัตถุ ก็จะเห็นลักษณะนั้น ๆ สามารถทำได้ เช่น
    รถยนต์มีสีแดง และมีล้อสี่ล้อ การสั่งงานรถยนต์ทำได้โดย เข้าเกียร์ จัลพวงมาลัย เหยียคันเร่ง และขับไป
จากประโยคข้างต้น เราจะเห็นได้ว่ารถคันนี้มีคุณลักษณะ (Attribute หรือ Porperties) คือ มีสีแดง และมีสี่ล้อ และมี เมธอด(Method) คือการเข้าเกียร์ จับพวงมาลัย เหยีบบคันเร่งและขับไป
กล่าวโดยสรุปแล้ว เราสามารถอธิบายคำว่า เมธอด (Method) และ แอตทริบิวต์(Attribute) ได้นั้นนี้
เมธอด(Method) คือการที่ออบเจ็กต์มีความสามารถหรือหน้าที่ในการกระทำบางสิ่งบางอย่าง เช่น รถยนต์เคลื่อนที่ และ เร่งความเร็วรถยนต์
แอตทริบิวต์ (Attribute) คือการอธิบายถึงลักษณะของออบเจ็กต์ในที่นี้คือ ลักษณะภายนอกของรถยต์ เช่น สี รุ่นของรถ และสถานะต่าง ๆ ของออบเจ็ตต์เช่น ความเร็วในขณะใดขณะหนึ่ง
ดังนั้น การเขียนโปรแกรมเชิงวัถตุ ก็คือการที่เราออกแบบโปรแกรมเป็นออบเจ็กต์ โดยที่แต่ละออบเจ็กต์ก็มีลักษณะและเมธอดของตัวเอง เพื่อมาทำงานร่วมกันจนกลายเป็นโปรแกรม

Abstraction (การกำหนดสาระคำคัญ)
    มองปัญหาที่ต้องการแก้ไขเป็นออบเจ็กต์โดยแยกแยะแอดทริบิวต์และเมธอดที่เป็นสารระสำคัญออกมา ซึ่งมองข้ามรายละเอียดเบื้องหลังที่ไม่จำเป็นออกไป ตัวอย่างเช่น
    รถยนต์มี พวงมาลัย เกียร์ เบรก เหยียคันเร่งเพราะเพิ่มความเร็วรถ หมุนพวงมาลัยให้รถเลี้ยว และเหยีบเบรกให้รถหยุด แต่จะไม่รู้รายละเอียดการทำงานของกลไกภายในรถยนต์
Encapsulation (การห่อหุ้มหรือการปกป้องข้อมูล) 
    ปิดซ่อนเพื่อควบคุมการเข้าถึงข้อมูลของออบเจ็กต์ไม่ให้เปลี่ยนแปลงจากภายนอกได้โดยตรง แต่สามารถเข้าถึงได้โดยใช้ฟังก์ชันภายในออบเจ็กต์นั้น หรือ เรียกว่า เมธอดเป็นตัวเชื่อม

ประโยชน์ของการเขียนโปรแกรมเชิงวัถตุ
    การเขียนโปรแกรมเชิงวัถตุมีปะโยชน์สำหรับการเขียนโปรแกรมที่มีขนาดใหญ่ และมีความซํบซ้อนเป็นอย่างมาก เพราะไม่ต้องเขียนโปรแกรมตามโครงสร้างทุกคำสั่งทั้งหมดแต่สามารถเรียก
    ใช้งานชุดคำสั่งที่สร้างไว้ผ่านออบเจ็กต์ จึงช่วยลดจำนวนตัวแปรและโค้คคำสั่งที่ใช้ในการเขียนโปรแกรมได้อย่างมาก รวมทั้งง่ายต่อการแก้ไขข้อผิดพลาด 
    สำหรับภาษา ไพธอนอาจจะสนับสนุนการเขียนโปรแกรมเชิงวัตถุไม่หลากหลายเหมือนภาษา c++ java แค่ก็เพียงพอที่จะใช้พัฒนาโปรแกรมที่มีขนาดใหญ่ได้

    ในบทที่ผ่านมาได้กล่าวถึงการเรียกใช้งานโปรแกรมเชิงวัถตุเบื้องวัตถุเบื้องต้น โดยการเรียกใช้เมธอดต่าง ๆ กันบ้างแล้ว เช่น การเรียกใช้เมธอดกับตัวแปรแบบลิสต์รายการ เช่น List
    Tuple เป็นต้น ซึ่งตัวแปรเหล่านี้ถูกมองเป็นออบเจ็กต์หนึ่ง ที่ไลบารีมาตรฐานของภาษาไพธอนได้มีเมธอดสนับสนุนการทำงานต่าง ๆ 
    เช่น add(x) เพิ่มสมาชิก และ clear() ลบสมาชิก เป็นต้น ส่วนในบทนี้เราจะเรียนรู้การสร้างชุดคำสั่งที่สามารถนำไปใช้กับการทำงานอย่างใดอย่างหนึ่งหรือออบเจ็กต์ด้วยตนเอง
    