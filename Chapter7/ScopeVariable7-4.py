#LocalVariable
"""
เป็นตัวแปรที่ประกาศภายในฟังกชัน ซึ่งตัวแปรจะถูกเรียกใช้งานร่วมกันกับคำสั่งต่าง ๆ 
ที่อยู่ภายในฟังก์ชันเท่านั้น ฟังก์ชันอื่หรือโปรแกรมหลักนจะไม่สามารถใช้งานได้ 
"""
#ตัวอย่างLocalVariable

def localV():
    def func():
        s = "s is Global variable"
        print(s)

    func()
    print(s)


# ตัวอย่างการเรียกใช้ตัวแปร s ที่เป็นตัวแปรโลคอล ถ้ามีการเรียกใช้ตัวแปรนอก จะแสดง NameError: name 'S' is not defined


# Global variable
"""
เป็นตัวแปรที่ประกาศไว้ภานนอกฟังก์ชันทุกฟังก์ชัน โดยจะวางอยู่ในส่วนของโปรแกรมหลัก
ทำให้โปรแกรมหลักภายนอกฟังก์ชันและภายในบล็อกของทุกฟังก์ชันสามารถเรียกใช้ตัวแปรนี้ได้ หรือ เรียกว่าตัวแปรสาธารณะ
"""
#ตัวอย่าง Global variable 
def GlobalV():
    s = "s is Global variable"
    def func():
        print(s)
    func()

#ตัวอย่างตัวแปร s เป็นตัวแปรโกลบอล สามารถเรียกใช่ได้ทุกส่วนของโปรแกรมและภายในฟังก์ชัน

"""
ไพธอนไม่อนุญาติให้ใช้ตัวแปรโกลบอลและตัวแปรโลคอลมีชื่อเหมือนกันอยู๋ในฟังข์กันเดียวกัน
เช่น หากนำตัวอย่างแรกรวมกับตัวอย่างที่สอง เริ่มต้นการเรียกใช้ตัวแปรโกลบอลในฟังก์ชัน จากนั้นกำหนดตัวแปรชื่อเดียวกันด้วยค่าใหม่
จะทำให้เกิดข้อผิดพลาด
"""
def gv():
    s= "s is Global variable"
    def func():
        print(s)
        s = "s is Local Variable"
        print(s)
    func()


#จะแจ้งเตือนว่า บรรทัดที่ 39 ของฟังก์ชัน fnuc UnboundLocalError: local variable 's' referenced before assignment
'''
หากต้องการใช้ ตัวแปร s ในตัวแปรโกลบอล ควรแจ้งมาให้ทราบอย่างเจาะจง ดังนั้นให้แก้ไขโดยใช้ใส่
global ประกาศด้านหน้า s อย่างจงเจาะว่าเป็นโกลบอล เพื่อให้ไพธอนทราบก่อน
'''
def gv2():
    s= "s is Global variable"
    def func():
        global s
        print(s)
        s = "s is Local Variable"
        print(s)
    func()

#ตัวแปรนอนโลคอล Nonlocal Variales
'''
ตัวแปรไม่ประจำโลคอล จะมีลักษณะการใช้งานคล้ายกับตัวแปรโกลบอลเป็นอย่างมาก โดยนอนโลคอลจะอนุญาตให้ฟังก์ชัน
ย่อยที่ซ้อนอยู่ภายในฟังก์ชันหลักสามารถเข้าถึงตัวแปรในฟังก์ชันหลักได้ แต่ไม่สามารถเรียกใช้ที่โปรแกรมหลักและฟังก์ชันหลักได้
'''
#การเรียกใช้ตัวแปรแบบ Nonlocal Variales ในฟังก์ชันย่อย
# def funcMain():             #กำหนด funcmian เป็นฟังก์ชันหลัก
#     x=30                    #ประกาศตัวแปร x เป็นโลคอลของฟังก์ชันหลัก
#     def fnucSub():          #กำหนด fnucSub เป็นฟังก์ชันย่อย
#         x=48                #ประกาศตัวแปร x เป็นโลคอลของฟังก์ชันย่อย
#     print("Value of x before calling funcSub : ",x) #พิมพ์ตัวแปร x ก่อนเรียกใช้ฟังก์ชันย่อย
#     print("calling funcSub now : ") 
#     fnucSub()                                       #เรียกใช้ฟังก์ย่อย
#     print("Value of x afrer call funcSub : ",x)     #พิมพ์ตัวแปร x หลังเรียกใช้ฟังก์ชันย่อย
# x=16                                                #ประตัวแปรโกลบอล x ในโปรแกรมหลัก
# funcMain()                                          #เรียกใช้ฟังก์หลัก
# print('Value of x in main program : ',x )           #พิมพ์ตัวแปร x ในโปรแกรมหลัก

'''
จากตัวอย่าง หลักจากเรียกใข้ฟังก์ชัน funcMain เริ่มต้นจะแสดงค่า x = 30 เป็นค่าตัวแปรแบบโลคอล
ในฟังก์ชันหลัก จากนั้นเมื่อมีการเรียกใช้ฟังก์ชันย่อยชื่อ funcSub ได้มีการกำหนดค่าให้ x = 48 
ซึ่งไพธอนจะมองว่าเป็นตัวแปรโลคอลแยกมาอีกตัวอยู่ในขอบเขตของฟังก์ชันย่อยนี้ ดังนั้นเมื่อออกจากฟังก์ชันย่อยตัวแปรโลคอลภายใน
ขอบเขตของฟังก์ชันย่อยนี้ ดังนั้นเมื่อออกจากฟังก์ชันย่อยตัวแปรโลคอลภายใต้จะถูกทำลาย จึงสั่งพิมพ์แสดงค่าตัวแปร  x ยังคงค่าเท่า 30
เพราะค่าตัวแปรโลคอลในฟังก์ชันหลัก หลังออกจากฟังก์ชันหลักตัวแปรในฟังก์ชันหลักจะถูกทำลาย จากนั้นเมื่อสั่งพิมพ์ค่าตัวแปร x อีกครั้ง
จึงมีค่าเท่ากับ 16 ที่เป็นตัวแปรโกลบอลใรโปรแกรมหลัก   จากตัวอย่างเราต้องการนำตัวแปร x จากฟังก์ชันหลักมากำหนดค่าใช้งานใหม่ในฟังก์ชันย่อย
โดยการใส่ศีย์เวิร์ด nonlocal แจ้งให้ไพธอนทราบก่อนว่าตัวแปร x ไม่ใช่ตัวแปรโลคอลในฟังก์ชันย่อยที่ซ้อนกันอยู่ เ
มื่อเปลี่ยนค่า x ภายในฟังก์ชันย่อยจะเปลี่ยนแปลค่า x ของฟังก์ขันหลักด้วย
'''
def funcMain():             #กำหนด funcmian เป็นฟังก์ชันหลัก
    x=30                    #ประกาศตัวแปร x เป็นโลคอลของฟังก์ชันหลัก
    def fnucSub():          #กำหนด fnucSub เป็นฟังก์ชันย่อย
        nonlocal x          #แจ้งไพธอนให้ตัวแปร x ไม่ใช่โลคอล
        x=48                #ประกาศตัวแปร x เป็นโลคอลของฟังก์ชันย่อย
    print("Value of x before calling funcSub : ",x) #พิมพ์ตัวแปร x ก่อนเรียกใช้ฟังก์ชันย่อย
    print("calling funcSub now : ") 
    fnucSub()                                       #เรียกใช้ฟังก์ย่อย
    print("Value of x afrer call funcSub : ",x)     #พิมพ์ตัวแปร x หลังเรียกใช้ฟังก์ชันย่อย
x=16                                                #ประตัวแปรโกลบอล x ในโปรแกรมหลัก
funcMain()                                          #เรียกใช้ฟังก์หลัก
print('Value of x in main program : ',x )           #พิมพ์ตัวแปร x ในโปรแกรมหลัก

'''เมื่อรันโปรแกรม มีการเรียกใข้ฟังก์ชัน funcMain จะพิมพ์ค่า x = 30 จากนั้นเรียกใช้ฟังก์ชันย่อย funcsub 
แล้วแจ้งไพธอนให้ตัวแปร x ในฟังก์ชันย่อยเป็นนอนโลคอน ดังนั้นเมื่อค่ากำหนด x = 48 จึงไม่มีการสร้างตัวแปร x เป็นโลคอล
ภายใต้ฟังก์ชันย่อย แต่เป็นการใช้ตัวแปร x ในฟังก์ชันหลัก'''