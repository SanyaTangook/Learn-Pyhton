# การส่งค่าให้กับฟังก์ชัน functionArguments
"""
พารามืเตอร์ที่เรารับค่ามาใช้ในฟังก์ชัน จะมีลักษณะคล้ายกับตัวแปรโลคอลอื่น ๆ ที่ถูกประกาศเมื่อเข้าสู่ฟังก์ชัน
แล้วจะถูกทำลายเมื่อออกจากฟังก์ชันและเมื่อมีการเรียกใช้ฟังก์ขัน จะมีการส่งค่าอาร์กิวเมนต์ไปยังพารามิเตอร์ของฟังก์ชัน
ซึ่งไม่สามารถส่งเป็นค่าโดยตรงหรือผ่านตัวแปรทีเก็บค่านั้นอยู่ก็ได้ มีการส่งค่าหลายรูปแบบ
"""
# Positional argment
'''
Positional argment หรือ Required เป็นการส่งค่าอาร์กิวเมนต์ไปยังฟังก์ขัน โดยจำนวนอาร์กิวเมนต์ที่ส่งจะต้องตรง
กับพารามิเตอร์ระบุไว้ในฟังก์ชัน และชื่อตัวแปรของอาร์กิวเมนต์ไม่จำเป็นต้องเป็นชื่อเดียวกับตัวแปรพารามิเตอร์ก็ได้
'''
from unittest import result


def max_vlaue(num1,num2):   #สร้างฟังก์ชันชื่อ max_vlaue ที่มีพารามิเตอร์
    if num1 > num2:         #เปรียบเทียบหาค่าพารามิเตอร์ที่มีมากกว่า
        print('Max value is ',num1) 
    else :
        print('max value is ',num2)

value1=int(input('Please enter an integer value : '))
value2=int(input('Please enter an integer value : '))

max_vlaue(value1,value2) #เรียกใช้ฟังก์ชันพร้อมส่งค่าอาร์กิวเมนต์และแสดงผล
"""จากตัวอย่างต่อไปนี้ เป็นการสร้างฟังก์ชันชื่อ max_value เพื่อเปรียบเทียบค่าที่ส่งมา
ทางพารามิเตอร์ 2 ค่า โดยค่าที่ส่งไปจะได้จากการรับค่าผ่านทางแป้นพิมพ์ด้วยฟังก์ชันinput 
แล้วนำค่ามาเปรียบเทียบและแสดงผล"""



# Default arguments 
"""
เป็นการกำหนดค่าเริ่มต้นให้กับพารามิเตอร์บางตัวในฟังก์ชัน ดังนั้นเมื่อเราเรียกใช้ฟังก์ชันจึงไม่ต้องใส่อาร์กิวเมนต์
ให้กับพารามิเตอร์ที่กำหนดค่าเริ่มต้นเอาไว้ก็ได้ และอาร์กิวเมนต์จะระบุค่าโดยตรงหรือใช้ตัวแปรที่เก็บค่านั้นอยู่ก็ได้
"""
# ข้อควรระวัง การกำหนดพารามิเตอร์นั้นต้องเริ่มต้นจากตัวที่ไม่มีค่าเริ่มต้นก่อนแล้วจึงตามด้วยตัวที่มีค่าเริ่มต้นก่อนแล้วจึงตามด้วยตัวที่มีค่าเริ่มต้น

'''
การส่งอาร์กิวเมนต์ให้กับพารามิเตอร์ที่มีค่าเริ่มต้น
    สร้างฟังก์ชันชื่อ earn เพื่อคำนวณค่าแรงรายวันโดยต้องกำหนดพารามิเตอร์ดังนี้
    จำนวนชั่วโมงทำงาน h
    อัตราค่าจ้างชั่วโมงละ 50 บาท r=50
คำนวณค่าแรงจากจำนวนชั่วโมงคูณด้วยอัตราค่าจ้าง 
'''
def earn(h,r=50):   #สร้างฟังก์ชันและกำหนดพารามิเตอร์ แบบระบุตำแหน่งและค่าเริ่มต้น
    result=h*r      #นำพารามิเตอร์มาคำนวณหาค่าตอบแทน
    print('earn is : ',result) #พิมพ์แสดงค่าตอบแทน

earn(8) #เรียกใช้ฟังก์ชันส่งอาร์กิวเมนต์แบบระบุตำแหน่งและใช้ค่าเริ่มต้น
earn(8,20) #เรียกใช้ฟังก์ชันส่งอาร์กิวเมนต์แบบระบุตำแหน่ง 2 ตำแหน่ง

''' จากตัวอย่าง การเรียกใช้ฟังก์ชัน eran(8) เป็นการส่ง Positional argment มีค่าเป็น 8 ร่วมกับการส่ง Default arguments 
เพื่อใช้ค่าเริ่มต้นที่กำหนดำไว้ในพารามิเตอร์ส่วน การเรียกใช้ฟังก์ชัน earn(8,20) เป็นการส่ง Positional argment ด้วยค่า 8 และ 20'''



# Keyword arguments 
'''
สำหรับฟังก์ชันที่มีพารามิเตอร์หลายตัว จะกำหนดให้พารามิเตอร์บางตัวที่มีชื่อพร้อมระบุค่าเริ่มต้น เหมือนกับ Default arguments 
จะต่างกันที่การส่งค่าแบบคีย์เวิร์ดอาร์กิวเมนต์ เราจะต้องระบุคีย์เวิร์ดชื่ออาร์กิวเมนต์ตามด้วยเครื่องหมาย = และค่าที่ต้องการ 
ลำดับของอากิวเมนต์สามารถสลับลำดับกันได้จึงช่วยให้ไม่เกิดความผิดพลาด และสามารถใส่ค่าเฉพาะบางอาร์กิวเมนต์ที่ต้องการ
'''
# การส่งคีย์เวิร์ดอาร์กิวเมนต์ให้กับพารามิเตอร์
"""
    เป็นการสร้างฟังก์ชันชื่อ earn เพื่อคำนวณค่าแรงรายวัน โดยต้องการกำหนดพารามิเตอร์
จำนวนชั่วโมงทำงาน h
อัตราค่าจ้างชั่วโมงละ 50 บาท
จำนวนนาทีมาสาย  m
อัตราหักเวลามาสายนาทีละ l = 5
เราจะคำนวณค่าแรงจากจำนวนชั่วโมงและลบค่ามาสาย อินเตอร์แอคทีฟ
"""
def earn2(h,m,r=50,l=5): #สร้างฟังก์ชันและกำหนดพารามิเตอร์แบบระบุตำแหน่งและค่าเริ่มต้น
    result=(h*r)-(m*l)  #คำนวณค่าตอบแทน
    print('earn2 is :',result) #พิมพ์ค่าตอบแทน

earn2(h=8,r=60,m=10,l=7) #เรียกฟังก์ชันส่งอาร์กิวเมนต์แบบใช้คีย์เวิร์ดพร้อมกำหนดค่า
earn2(8,10) #เรียกใช้ฟังก์ชันส่งอาร์กิวเมนต์แบบระบุตำแหน่งและใช้ค่าเริ่มต้น

'''
จากตัวอย่าง การเรียกใช้ฟังก์ชัน earn2(h=8,r=60,m=10,l=7) เป็นการส่ง Keyword arguments พร้อมระบุค่าที่ต้องการ จึงไม่ต้องวางตรง
ตำแหน่งกับพารามิเตอร์ก็ได้ ส่วนการเรียกใช้ฟังก์ชัน earn(8,10) เป็นการส่ง Positional argument ค่า 8 และ 10 และ Default arguments 
'''


#Variable-length arguments 
'''
เป็นอาร์กิวเมนต์แบบไดนามิกที่สามารถกำหนดจำนวนในขณะที่รันโปรแกรม ซึ่งต่างจาก Positional และ Default argument ดอกจันทร์(*)
อยู่ด้านหน้าพารามิเตอร์ ทำให้สามารถเพิ่มหรือลดจำนวนพารามิเตอร์เหมือนการใช้ข้อมูลชนิด List โดยเริ่มต้นจากไม่มีพารามิเตอร์หรือค่าว่าง
def functionname ([formal_args,]*var_args):
    statement
formal_args: พารามิเตอร์ปกติทั่วไป
*var_args  : พารามิเตอร์ที่เป็นรายการข้อมูล
'''
def salesAmount(product,*sales): #กำหนดฟังก์ชันมีพารามิเตอร์ทั่วไปและไดนามิก
    result = 0  #ตัวแปรเก็บยอกขายรวม
    print('Product name : ',product) #แสดงชื่อสินค้าจากพารามิเตอร์ product
    if len(sales) == 0: #ถ้าไม่มีข้อมูลไม่แจ้งยอดขาย
        print('No SalesAmount')
    else:       #หากมีรายการในการ sales
        for var in sales: #วนลูปรวมค่าในรายการยอดขาย
            result +=var
        print('SalesAmount = ',result)        #พิมพ์สรุปยอดขาย

salesAmount('book',200,304,933,405,945,484) #เรียกใช้ฟังก์ชันโดยส่งชื่อสินค้าและชุดยอดขาย