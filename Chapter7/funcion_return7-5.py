# ฟังก์ชันที่มีการส่งคืนค่า
'''
เป็นการสร้างฟังก์ชันให้มีการคืนค่ากลับไปยังโปรแกรมหลัก โดยการวางคำสั่ง return ไว้ด้านหน้านิพจน์ที่ต้องการส่งค่ากลับ
ตัวอย่าง เป็นการสร้างฟังก์ชันหาค่าสูดสุด ในชื่อ max โดยส่งค่าผ่านพารามิเตอร์ val1 และ val2 จากนั้นจะนำค่าจากพารามิเตอร์
มาเปรียบเทียบหาค่าสูงสุดและส่งค่าผลลัพธ์กลับไปยังโปรแกรมหลัก 
'''
def max(val1,val2): #กำหนดฟังก์ชันมี 2 พารามิเตอร์
    if(val1>val2):  #นำค่าพารามิเตอร์ val1 เปรียบเทียบว่ามากกว่า val2 หรือไม่
        return val1 #ถ้าจริงให้ส่งค่า val1 เป็นผลลัพธ์
    else:           #ถ้าไม่จริงให้ส่งค่า val2 เป็นผลลัพธ์
        return val2

vulue=max(23,15)
print(vulue)
'''จากตัวอย่าง การเรียกใช้ฟัวก์ชัน max(23,15) ค่า23จะถูกนำไปเปรียบเทียบว่ามากกว่า 15 หรือไม่ เมื่อเป็นจริงจะ return val1 หากไม่ใช่จะ return val2 แทน'''

#ฟังก์ชันแลมบ์ดา(Lambda funcion)
'''เป็นฟังก์ชันไม่มีชื่อ (Anonymous Funcion) ที่ไม่ได้ประกาศตามรูปแบบด้วย def แต่ใช้คีย์เวิร์ด lambda จะใช้กับฟังก์ชันที่มีขนาดเล็ก มีได้หลายพารามิเตอร์แต่มิได้นิพจน์
เดียวสำหรับใช้ส่งค่า ไม่สามารถใช้คำสั่ง print() วางอยู่ในแต่แลมบ์ดาได้การกำหนดฟังก์ชันจึงมีอยู่บรรทัดเดียว มีรูปแบบดังนัเ
lambda [arg[,arg2,......arg]] :expression
lambda คีย์เวิร์ดในการประกาศฟังก์ชันแลมบ์ดาที่มีบรรทัดเดียว
[arg[,arg2,......arg]] อาร์กิวิเมนต์ที่รับค่ามาใช้ในฟังก์ชัน
expression นิพจน์นำอาร์กิวเมนต์มาดำเนินการและส่งคืนค่ากลับไป
'''
#ตัวอย่างการใช้ฟังก์แลมบ์ดาคำนวณหาผลคูณของค่าอาร์กิวเมนต์
multiply=lambda v1,v2 : v1*v2 
# สร้างแลมบ์ดารับอาร์กิวเมนต์ v1 และ v2 มาใช้ในนิพจน์การคณูแล้วคืนค่าให้กับ multiply
print('Value of 2*10 = ', multiply(2,10))

